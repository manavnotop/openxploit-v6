"use client"

import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from "recharts"
import { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"

interface Vulnerability {
  id: string
  name: string
  severity: "critical" | "high" | "medium" | "low"
  description: string
  affected: string
  remediation: string
}

interface VulnerabilityChartProps {
  data: Vulnerability[]
}

const chartConfig = {
  critical: {
    label: "Critical",
    color: "#ef4444",
  },
  high: {
    label: "High",
    color: "#f97316",
  },
  medium: {
    label: "Medium",
    color: "#eab308",
  },
  low: {
    label: "Low",
    color: "#22c55e",
  },
} satisfies ChartConfig

export function VulnerabilityChart({ data = [] }: VulnerabilityChartProps) {
  const severityOrder = ["critical", "high", "medium", "low"]

  // Ensure data is an array and filter out any null/undefined items
  const safeData = Array.isArray(data) ? data.filter(Boolean) : []

  const chartData = severityOrder.map((severity) => {
    return {
      severity: severity.charAt(0).toUpperCase() + severity.slice(1),
      count: safeData.filter((v) => v && v.severity === severity).length,
    }
  })

  const getBarColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "#ef4444"
      case "high":
        return "#f97316"
      case "medium":
        return "#eab308"
      case "low":
        return "#22c55e"
      default:
        return "#3b82f6"
    }
  }

  if (!safeData.length) {
    return (
      <div className="flex h-full items-center justify-center">
        <p className="text-muted-foreground">No vulnerability data available</p>
      </div>
    )
  }

  return (
    <ChartContainer config={chartConfig}>
      <ResponsiveContainer width="100%" height="100%">
        <BarChart
          data={chartData}
          margin={{
            top: 20,
            right: 30,
            left: 20,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="severity" />
          <YAxis allowDecimals={false} />
          <Tooltip
            content={({ active, payload }) => {
              if (active && payload && payload.length) {
                const data = payload[0].payload
                return (
                  <ChartTooltip content={<ChartTooltipContent />}>
                    {/* <ChartTooltipContent>
                      <div className="flex flex-col gap-2">
                        <p className="text-sm font-medium">{data.severity} Vulnerabilities</p>
                        <p className="text-2xl font-bold">{data.count}</p>
                      </div>
                    </ChartTooltipContent> */}
                  </ChartTooltip>
                )
              }
              return null
            }}
          />
          <Bar dataKey="count">
            {chartData.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={getBarColor(entry.severity)} />
            ))}
          </Bar>
        </BarChart>
      </ResponsiveContainer>
    </ChartContainer>
  )
}


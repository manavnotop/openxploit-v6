"use client"

import { useState } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ChevronDown, ChevronUp, ExternalLink } from "lucide-react"

interface Vulnerability {
  id: string
  name: string
  severity: "critical" | "high" | "medium" | "low"
  description: string
  affected: string
  remediation: string
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[]
}

export function VulnerabilityTable({ vulnerabilities = [] }: VulnerabilityTableProps) {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
  const [sortField, setSortField] = useState<"severity" | "name">("severity")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"
      case "high":
        return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300"
      case "medium":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"
      case "low":
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
      default:
        return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"
    }
  }

  const getSeverityValue = (severity: string) => {
    switch (severity) {
      case "critical":
        return 4
      case "high":
        return 3
      case "medium":
        return 2
      case "low":
        return 1
      default:
        return 0
    }
  }

  // Ensure vulnerabilities is an array and filter out any null/undefined items
  const safeVulnerabilities = Array.isArray(vulnerabilities) ? vulnerabilities.filter(Boolean) : []

  // Sort the vulnerabilities safely
  const sortedVulnerabilities = [...safeVulnerabilities].sort((a, b) => {
    if (!a || !b) return 0

    if (sortField === "severity") {
      const aValue = getSeverityValue(a.severity)
      const bValue = getSeverityValue(b.severity)
      return sortDirection === "desc" ? bValue - aValue : aValue - bValue
    } else {
      const aName = a.name || ""
      const bName = b.name || ""
      return sortDirection === "desc" ? bName.localeCompare(aName) : aName.localeCompare(bName)
    }
  })

  const toggleSort = (field: "severity" | "name") => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("desc")
    }
  }

  if (!safeVulnerabilities.length) {
    return (
      <div className="py-8 text-center">
        <p className="text-muted-foreground">No vulnerabilities found</p>
      </div>
    )
  }

  return (
    <>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[150px] cursor-pointer" onClick={() => toggleSort("severity")}>
              <div className="flex items-center">
                Severity
                {sortField === "severity" &&
                  (sortDirection === "asc" ? (
                    <ChevronUp className="ml-1 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-1 h-4 w-4" />
                  ))}
              </div>
            </TableHead>
            <TableHead className="cursor-pointer" onClick={() => toggleSort("name")}>
              <div className="flex items-center">
                Vulnerability
                {sortField === "name" &&
                  (sortDirection === "asc" ? (
                    <ChevronUp className="ml-1 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-1 h-4 w-4" />
                  ))}
              </div>
            </TableHead>
            <TableHead className="w-[100px] text-right">Details</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {sortedVulnerabilities.map((vulnerability) => (
            <TableRow key={vulnerability.id || Math.random().toString()}>
              <TableCell>
                <Badge className={getSeverityColor(vulnerability.severity || "")}>
                  {(vulnerability.severity || "unknown").charAt(0).toUpperCase() +
                    (vulnerability.severity || "unknown").slice(1)}
                </Badge>
              </TableCell>
              <TableCell>{vulnerability.name || "Unnamed Vulnerability"}</TableCell>
              <TableCell className="text-right">
                <Button variant="ghost" size="sm" onClick={() => setSelectedVulnerability(vulnerability)}>
                  <ExternalLink className="h-4 w-4" />
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      <Dialog open={!!selectedVulnerability} onOpenChange={(open) => !open && setSelectedVulnerability(null)}>
        {selectedVulnerability && (
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                {selectedVulnerability.name || "Unnamed Vulnerability"}
                <Badge className={getSeverityColor(selectedVulnerability.severity || "")}>
                  {(selectedVulnerability.severity || "unknown").charAt(0).toUpperCase() +
                    (selectedVulnerability.severity || "unknown").slice(1)}
                </Badge>
              </DialogTitle>
              <DialogDescription>Vulnerability details and remediation steps</DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <h3 className="font-medium mb-1">Description</h3>
                <p className="text-sm text-muted-foreground">
                  {selectedVulnerability.description || "No description available"}
                </p>
              </div>
              <div>
                <h3 className="font-medium mb-1">Affected Component</h3>
                <p className="text-sm text-muted-foreground">{selectedVulnerability.affected || "Not specified"}</p>
              </div>
              <div>
                <h3 className="font-medium mb-1">Remediation</h3>
                <p className="text-sm text-muted-foreground">
                  {selectedVulnerability.remediation || "No remediation steps available"}
                </p>
              </div>
            </div>
          </DialogContent>
        )}
      </Dialog>
    </>
  )
}


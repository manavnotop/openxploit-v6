"use client"

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ExternalLink, Eye } from "lucide-react"
import { Skeleton } from "@/components/ui/skeleton"

interface Vulnerability {
  id: string
  name: string
  risk: string
  url: string
  description: string
  solution: string
  evidence: string
  cweid: string
  reference: string
  tags: Record<string, string>
  [key: string]: any
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[]
  onViewDetails: (vulnerability: Vulnerability) => void
  loading: boolean
}

export default function VulnerabilityTable({ vulnerabilities, onViewDetails, loading }: VulnerabilityTableProps) {
  const getRiskBadgeVariant = (risk: string) => {
    const riskLower = risk.toLowerCase()
    if (riskLower === "high") return "destructive"
    if (riskLower === "medium") return "default"
    if (riskLower === "low") return "secondary"
    return "outline"
  }

  if (loading) {
    return (
      <div className="space-y-3">
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={i} className="flex items-center space-x-4">
            <Skeleton className="h-12 w-full" />
          </div>
        ))}
      </div>
    )
  }

  if (vulnerabilities.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500 dark:text-gray-400">
        No vulnerabilities found matching your criteria.
      </div>
    )
  }

  return (
    <div className="overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[30%]">Name</TableHead>
            <TableHead className="w-[15%]">Risk</TableHead>
            <TableHead className="w-[15%]">CWE ID</TableHead>
            <TableHead className="w-[30%]">URL</TableHead>
            <TableHead className="w-[10%] text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.map((vuln) => (
            <TableRow key={vuln.id}>
              <TableCell className="font-medium w-[30%] pr-4">{vuln.name}</TableCell>
              <TableCell className="w-[15%] px-4">
                <Badge variant={getRiskBadgeVariant(vuln.risk)}>{vuln.risk}</Badge>
              </TableCell>
              <TableCell className="w-[15%] px-4">
                {vuln.cweid && (
                  <a
                    href={`https://cwe.mitre.org/data/definitions/${vuln.cweid}.html`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center text-blue-600 hover:underline"
                  >
                    CWE-{vuln.cweid}
                    <ExternalLink className="ml-1 h-3 w-3" />
                  </a>
                )}
              </TableCell>
              <TableCell className="w-[30%] pl-4">
                <div className="truncate" title={vuln.url}>{vuln.url}</div>
              </TableCell>
              <TableCell className="w-[10%] text-right">
                <Button variant="outline" size="sm" onClick={() => onViewDetails(vuln)}>
                  <Eye className="mr-1 h-4 w-4" />
                  Details
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}

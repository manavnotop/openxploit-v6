"use client"

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ExternalLink, ShieldAlert, AlertTriangle, AlertCircle, Info } from "lucide-react"
import { ScrollArea } from "@/components/ui/scroll-area"

interface Vulnerability {
  id: string
  name: string
  risk: string
  url: string
  description: string
  solution: string
  evidence: string
  cweid: string
  reference: string
  tags: Record<string, string>
  [key: string]: any
}

interface VulnerabilityDetailProps {
  vulnerability: Vulnerability
  onClose: () => void
}

export default function VulnerabilityDetail({ vulnerability, onClose }: VulnerabilityDetailProps) {
  const getRiskIcon = (risk: string) => {
    const riskLower = risk.toLowerCase()
    if (riskLower === "high") return <ShieldAlert className="h-5 w-5 text-red-500" />
    if (riskLower === "medium") return <AlertTriangle className="h-5 w-5 text-amber-500" />
    if (riskLower === "low") return <AlertCircle className="h-5 w-5 text-blue-500" />
    return <Info className="h-5 w-5 text-gray-500" />
  }

  const getRiskColor = (risk: string) => {
    const riskLower = risk.toLowerCase()
    if (riskLower === "high") return "text-red-500"
    if (riskLower === "medium") return "text-amber-500"
    if (riskLower === "low") return "text-blue-500"
    return "text-gray-500"
  }

  return (
    <Dialog open={true} onOpenChange={() => onClose()}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <div className="flex items-center gap-2">
            {getRiskIcon(vulnerability.risk)}
            <DialogTitle className="text-xl">{vulnerability.name}</DialogTitle>
          </div>
          <DialogDescription className="flex items-center gap-2">
            <Badge
              variant={
                vulnerability.risk.toLowerCase() === "high"
                  ? "destructive"
                  : vulnerability.risk.toLowerCase() === "medium"
                    ? "warning"
                    : "secondary"
              }
            >
              {vulnerability.risk} Risk
            </Badge>
            {vulnerability.cweid && (
              <a
                href={`https://cwe.mitre.org/data/definitions/${vulnerability.cweid}.html`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline flex items-center"
              >
                CWE-{vulnerability.cweid}
                <ExternalLink className="ml-1 h-3 w-3" />
              </a>
            )}
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="flex-1 pr-4">
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold mb-1">URL</h3>
              <p className="text-sm break-all">{vulnerability.url}</p>
            </div>

            <div>
              <h3 className="font-semibold mb-1">Description</h3>
              <p className="text-sm">{vulnerability.description}</p>
            </div>

            {vulnerability.evidence && (
              <div>
                <h3 className="font-semibold mb-1">Evidence</h3>
                <div className="bg-gray-100 dark:bg-gray-800 p-2 rounded text-sm font-mono overflow-x-auto">
                  {vulnerability.evidence}
                </div>
              </div>
            )}

            <div>
              <h3 className="font-semibold mb-1">Solution</h3>
              <p className="text-sm whitespace-pre-line">{vulnerability.solution}</p>
            </div>

            {vulnerability.reference && (
              <div>
                <h3 className="font-semibold mb-1">References</h3>
                <a
                  href={vulnerability.reference}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-600 hover:underline text-sm flex items-center"
                >
                  {vulnerability.reference}
                  <ExternalLink className="ml-1 h-3 w-3" />
                </a>
              </div>
            )}

            {vulnerability.tags && Object.keys(vulnerability.tags).length > 0 && (
              <div>
                <h3 className="font-semibold mb-1">Related Standards</h3>
                <div className="flex flex-wrap gap-2">
                  {Object.entries(vulnerability.tags).map(([key, url]) => (
                    <a
                      key={key}
                      href={url as string}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline text-sm flex items-center"
                    >
                      {key}
                      <ExternalLink className="ml-1 h-3 w-3" />
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        <DialogFooter>
          <Button onClick={onClose}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}